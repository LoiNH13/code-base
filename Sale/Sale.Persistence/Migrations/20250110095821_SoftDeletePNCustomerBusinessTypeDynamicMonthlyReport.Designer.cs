// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sale.Persistence;

#nullable disable

namespace Sale.Persistence.Migrations
{
    [DbContext(typeof(SaleDbContext))]
    [Migration("20250110095821_SoftDeletePNCustomerBusinessTypeDynamicMonthlyReport")]
    partial class SoftDeletePNCustomerBusinessTypeDynamicMonthlyReport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Audits.EntityChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("change_type");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("client_ip_address");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uuid")
                        .HasColumnName("create_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("entity_name");

                    b.Property<string>("RequestId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("request_id");

                    b.Property<string>("Route")
                        .HasColumnType("text")
                        .HasColumnName("route");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("entity_changes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Audits.EntityPropertyChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("EntityChangeId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_change_id");

                    b.Property<string>("NewValue")
                        .HasColumnType("jsonb")
                        .HasColumnName("new_value");

                    b.Property<string>("OriginalValue")
                        .HasColumnType("jsonb")
                        .HasColumnName("original_value");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("property_name");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("property_type");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("entity_property_changes", (string)null);
                });

            modelBuilder.Entity("Sale.Domain.Entities.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("BusinessType")
                        .HasColumnType("integer")
                        .HasColumnName("business_type");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on_utc");

                    b.Property<Guid?>("ManagedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("managed_by_user_id");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("OdooRef")
                        .HasColumnType("integer")
                        .HasColumnName("odoo_ref");

                    b.Property<int>("VisitPerMonth")
                        .HasColumnType("integer")
                        .HasColumnName("visit_per_month");

                    b.HasKey("Id");

                    b.HasIndex("ManagedByUserId");

                    b.HasIndex("OdooRef")
                        .IsUnique()
                        .HasFilter("deleted = false");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("Sale.Domain.Entities.Customers.PlanNewCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on_utc");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("district_id");

                    b.Property<bool>("IsOpen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_open");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<int?>("WardId")
                        .HasColumnType("integer")
                        .HasColumnName("ward_id");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasFilter("deleted = false");

                    b.ToTable("plan_new_customers", (string)null);
                });

            modelBuilder.Entity("Sale.Domain.Entities.Metrics.CustomerTimeFrame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<Guid>("TimeFrameId")
                        .HasColumnType("uuid")
                        .HasColumnName("time_frame_id");

                    b.HasKey("Id");

                    b.HasIndex("TimeFrameId");

                    b.HasIndex("CustomerId", "TimeFrameId")
                        .IsUnique();

                    b.ToTable("customer_time_frames_rel", (string)null);
                });

            modelBuilder.Entity("Sale.Domain.Entities.Metrics.ForeCast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<double>("LastStockNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("last_stock_number");

                    b.Property<Guid>("MetricId")
                        .HasColumnType("uuid")
                        .HasColumnName("metric_id");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<double>("RetailSalesNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("retail_sales_number");

                    b.Property<double>("StockNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("stock_number");

                    b.Property<double>("WholeSalesNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("whole_sales_number");

                    b.HasKey("Id");

                    b.HasIndex("MetricId")
                        .IsUnique();

                    b.ToTable("forecasts", (string)null);
                });

            modelBuilder.Entity("Sale.Domain.Entities.Metrics.Metric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("CustomerTimeFrameId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_time_frame_id");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on_utc");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("OrderIds")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_ids");

                    b.Property<double>("OrderNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("order_number");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("ReturnIds")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("return_ids");

                    b.Property<double>("ReturnNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("order_value");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("CustomerTimeFrameId", "ProductId")
                        .IsUnique()
                        .HasFilter("deleted = false");

                    b.ToTable("metrics", (string)null);
                });

            modelBuilder.Entity("Sale.Domain.Entities.Metrics.OriginalBudget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<double>("LastStockNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("last_stock_number");

                    b.Property<Guid>("MetricId")
                        .HasColumnType("uuid")
                        .HasColumnName("metric_id");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<double>("RetailSalesNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("retail_sales_number");

                    b.Property<double>("StockNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("stock_number");

                    b.Property<double>("WholeSalesNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("whole_sales_number");

                    b.HasKey("Id");

                    b.HasIndex("MetricId")
                        .IsUnique();

                    b.ToTable("original_budgets", (string)null);
                });

            modelBuilder.Entity("Sale.Domain.Entities.Metrics.Target", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<double>("LastStockNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("last_stock_number");

                    b.Property<Guid>("MetricId")
                        .HasColumnType("uuid")
                        .HasColumnName("metric_id");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<double>("RetailSalesNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("retail_sales_number");

                    b.Property<double>("StockNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("stock_number");

                    b.Property<double>("WholeSalesNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("whole_sales_number");

                    b.HasKey("Id");

                    b.HasIndex("MetricId")
                        .IsUnique();

                    b.ToTable("targets", (string)null);
                });

            modelBuilder.Entity("Sale.Domain.Entities.MonthlyReports.MonthlyReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("BusinessType")
                        .HasColumnType("integer")
                        .HasColumnName("business_type");

                    b.Property<Guid>("CreateByUser")
                        .HasColumnType("uuid")
                        .HasColumnName("create_by_user");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<int>("DailyPurchases")
                        .HasColumnType("integer")
                        .HasColumnName("daily_purchases");

                    b.Property<int>("DailyVisitors")
                        .HasColumnType("integer")
                        .HasColumnName("daily_visitors");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on_utc");

                    b.Property<DateTime>("FromTimeOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("from_time_on_utc");

                    b.Property<bool>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_confirmed");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<double>("OnlinePurchaseRate")
                        .HasColumnType("double precision")
                        .HasColumnName("online_purchase_rate");

                    b.Property<DateTime>("ToTimeOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("to_time_on_utc");

                    b.Property<string>("_dynamicData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("dynamic_data");

                    b.HasKey("Id");

                    b.HasIndex("CreateByUser");

                    b.HasIndex("CustomerId");

                    b.ToTable("monthly_reports", (string)null);
                });

            modelBuilder.Entity("Sale.Domain.Entities.MonthlyReports.MonthlyReportItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<int>("Group")
                        .HasColumnType("integer")
                        .HasColumnName("group");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<Guid>("MonthlyReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("monthly_report_id");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<double>("Revenue")
                        .HasColumnType("double precision")
                        .HasColumnName("revenue");

                    b.HasKey("Id");

                    b.HasIndex("MonthlyReportId", "Group", "CategoryId")
                        .IsUnique();

                    b.ToTable("monthly_report_items", (string)null);
                });

            modelBuilder.Entity("Sale.Domain.Entities.Planning.PlanningApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("CustomerManagedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_managed_by");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on_utc");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<Guid>("PlanningControlId")
                        .HasColumnType("uuid")
                        .HasColumnName("planning_control_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<Guid>("StatusByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("status_by_user_id");

                    b.Property<double>("TotalOriginalBudgetAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("total_ob_amount");

                    b.Property<double>("TotalTargetAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("total_target_amount");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusByUserId");

                    b.HasIndex("PlanningControlId", "CustomerId")
                        .IsUnique()
                        .HasFilter("deleted = false");

                    b.ToTable("planning_approvals", (string)null);
                });

            modelBuilder.Entity("Sale.Domain.Entities.Planning.PlanningControl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on_utc");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("planning_controls", (string)null);
                });

            modelBuilder.Entity("Sale.Domain.Entities.Planning.PlanningControlLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<bool>("IsOriginalBudget")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_original_budget");

                    b.Property<bool>("IsTarget")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_target");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<Guid>("PlanningControlId")
                        .HasColumnType("uuid")
                        .HasColumnName("planning_control_id");

                    b.Property<Guid>("TimeFrameId")
                        .HasColumnType("uuid")
                        .HasColumnName("time_frame_id");

                    b.HasKey("Id");

                    b.HasIndex("TimeFrameId");

                    b.HasIndex("PlanningControlId", "TimeFrameId")
                        .IsUnique();

                    b.ToTable("planning_control_lines", (string)null);
                });

            modelBuilder.Entity("Sale.Domain.Entities.Products.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on_utc");

                    b.Property<bool>("IsShowMonthlyReport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_show_monthly_report");

                    b.Property<bool>("IsShowSalePlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_show_sale_plan");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("OdooRef")
                        .HasColumnType("integer")
                        .HasColumnName("odoo_ref");

                    b.Property<int>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Sale.Domain.Entities.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<bool>("Inactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("inactive");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OdooCode")
                        .HasColumnType("text")
                        .HasColumnName("odoo_code");

                    b.Property<int>("OdooRef")
                        .HasColumnType("integer")
                        .HasColumnName("odoo_ref");

                    b.Property<double>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("price");

                    b.Property<int>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OdooRef")
                        .IsUnique();

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Sale.Domain.Entities.Products.ProductTimeFramePrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("tfprice_id");

                    b.Property<Guid>("TimeFrameId")
                        .HasColumnType("uuid")
                        .HasColumnName("time_frame_id");

                    b.HasKey("Id");

                    b.HasIndex("TimeFrameId");

                    b.HasIndex("ProductId", "TimeFrameId")
                        .IsUnique();

                    b.ToTable("product_time_frame_prices", (string)null);
                });

            modelBuilder.Entity("Sale.Domain.Entities.TimeFrame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<int>("Month")
                        .HasColumnType("integer")
                        .HasColumnName("month");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("Year", "Month")
                        .IsUnique();

                    b.ToTable("time_frames", null, t =>
                        {
                            t.HasCheckConstraint("CK_TimeFrame_Month", "month >= 1 AND month <= 12");

                            t.HasCheckConstraint("CK_TimeFrame_Year", "(year)::numeric <= EXTRACT(year FROM CURRENT_DATE) + 1");
                        });
                });

            modelBuilder.Entity("Sale.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("BusinessType")
                        .HasColumnType("integer")
                        .HasColumnName("business_type");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on_utc");

                    b.Property<Guid?>("ManagedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("managed_by_user_id");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("_passwordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("Id");

                    b.HasIndex("ManagedByUserId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Audits.EntityPropertyChange", b =>
                {
                    b.HasOne("Domain.Entities.Audits.EntityChange", null)
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sale.Domain.Entities.Customers.Customer", b =>
                {
                    b.HasOne("Sale.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("ManagedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Sale.Domain.Entities.Customers.PlanNewCustomer", b =>
                {
                    b.HasOne("Sale.Domain.Entities.Customers.Customer", "Customer")
                        .WithOne("PlanNewCustomer")
                        .HasForeignKey("Sale.Domain.Entities.Customers.PlanNewCustomer", "CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Sale.Domain.Entities.Metrics.CustomerTimeFrame", b =>
                {
                    b.HasOne("Sale.Domain.Entities.Customers.Customer", null)
                        .WithMany("CustomerTimeFrames")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sale.Domain.Entities.TimeFrame", "TimeFrame")
                        .WithMany()
                        .HasForeignKey("TimeFrameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TimeFrame");
                });

            modelBuilder.Entity("Sale.Domain.Entities.Metrics.ForeCast", b =>
                {
                    b.HasOne("Sale.Domain.Entities.Metrics.Metric", null)
                        .WithOne("ForeCast")
                        .HasForeignKey("Sale.Domain.Entities.Metrics.ForeCast", "MetricId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Sale.Domain.Entities.Metrics.Metric", b =>
                {
                    b.HasOne("Sale.Domain.Entities.Metrics.CustomerTimeFrame", null)
                        .WithMany("Metrics")
                        .HasForeignKey("CustomerTimeFrameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sale.Domain.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Sale.Domain.Entities.Metrics.OriginalBudget", b =>
                {
                    b.HasOne("Sale.Domain.Entities.Metrics.Metric", null)
                        .WithOne("OriginalBudget")
                        .HasForeignKey("Sale.Domain.Entities.Metrics.OriginalBudget", "MetricId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Sale.Domain.Entities.Metrics.Target", b =>
                {
                    b.HasOne("Sale.Domain.Entities.Metrics.Metric", null)
                        .WithOne("Target")
                        .HasForeignKey("Sale.Domain.Entities.Metrics.Target", "MetricId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Sale.Domain.Entities.MonthlyReports.MonthlyReport", b =>
                {
                    b.HasOne("Sale.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("CreateByUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sale.Domain.Entities.Customers.Customer", null)
                        .WithMany("MonthlyReports")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Sale.Domain.Entities.MonthlyReports.MonthlyReportItem", b =>
                {
                    b.HasOne("Sale.Domain.Entities.MonthlyReports.MonthlyReport", null)
                        .WithMany("Items")
                        .HasForeignKey("MonthlyReportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Sale.Domain.Entities.Planning.PlanningApproval", b =>
                {
                    b.HasOne("Sale.Domain.Entities.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sale.Domain.Entities.Planning.PlanningControl", "PlanningControl")
                        .WithMany()
                        .HasForeignKey("PlanningControlId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sale.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("StatusByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PlanningControl");
                });

            modelBuilder.Entity("Sale.Domain.Entities.Planning.PlanningControlLine", b =>
                {
                    b.HasOne("Sale.Domain.Entities.Planning.PlanningControl", null)
                        .WithMany("PlanningControlLines")
                        .HasForeignKey("PlanningControlId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sale.Domain.Entities.TimeFrame", "TimeFrame")
                        .WithMany()
                        .HasForeignKey("TimeFrameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TimeFrame");
                });

            modelBuilder.Entity("Sale.Domain.Entities.Products.Product", b =>
                {
                    b.HasOne("Sale.Domain.Entities.Products.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Sale.Domain.Entities.Products.ProductTimeFramePrice", b =>
                {
                    b.HasOne("Sale.Domain.Entities.Products.Product", "Product")
                        .WithMany("ProductTimeFramePrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sale.Domain.Entities.TimeFrame", "TimeFrame")
                        .WithMany()
                        .HasForeignKey("TimeFrameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("TimeFrame");
                });

            modelBuilder.Entity("Sale.Domain.Entities.Users.User", b =>
                {
                    b.HasOne("Sale.Domain.Entities.Users.User", "ManagedByUser")
                        .WithMany("SubordinateUsers")
                        .HasForeignKey("ManagedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("ManagedByUser");
                });

            modelBuilder.Entity("Domain.Entities.Audits.EntityChange", b =>
                {
                    b.Navigation("PropertyChanges");
                });

            modelBuilder.Entity("Sale.Domain.Entities.Customers.Customer", b =>
                {
                    b.Navigation("CustomerTimeFrames");

                    b.Navigation("MonthlyReports");

                    b.Navigation("PlanNewCustomer");
                });

            modelBuilder.Entity("Sale.Domain.Entities.Metrics.CustomerTimeFrame", b =>
                {
                    b.Navigation("Metrics");
                });

            modelBuilder.Entity("Sale.Domain.Entities.Metrics.Metric", b =>
                {
                    b.Navigation("ForeCast");

                    b.Navigation("OriginalBudget");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Sale.Domain.Entities.MonthlyReports.MonthlyReport", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Sale.Domain.Entities.Planning.PlanningControl", b =>
                {
                    b.Navigation("PlanningControlLines");
                });

            modelBuilder.Entity("Sale.Domain.Entities.Products.Product", b =>
                {
                    b.Navigation("ProductTimeFramePrices");
                });

            modelBuilder.Entity("Sale.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("SubordinateUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
