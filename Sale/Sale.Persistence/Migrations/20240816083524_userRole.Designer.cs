// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sale.Persistence;

#nullable disable

namespace Sale.Persistence.Migrations;

[DbContext(typeof(SaleDbContext))]
[Migration("20240816083524_userRole")]
partial class userRole
{
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "8.0.7")
            .HasAnnotation("Relational:MaxIdentifierLength", 63);

        NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

        modelBuilder.Entity("Domain.Entities.Audits.EntityChange", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<string>("ChangeType")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("change_type");

                b.Property<string>("ClientIpAddress")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("client_ip_address");

                b.Property<Guid?>("CreateBy")
                    .HasColumnType("uuid")
                    .HasColumnName("create_by");

                b.Property<DateTime>("CreatedOnUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_on_utc");

                b.Property<Guid>("EntityId")
                    .HasColumnType("uuid")
                    .HasColumnName("entity_id");

                b.Property<string>("EntityName")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("entity_name");

                b.Property<string>("RequestId")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("request_id");

                b.Property<string>("Route")
                    .HasColumnType("text")
                    .HasColumnName("route");

                b.HasKey("Id");

                b.HasIndex("EntityId");

                b.ToTable("entity_changes", (string)null);
            });

        modelBuilder.Entity("Domain.Entities.Audits.EntityPropertyChange", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<DateTime>("CreatedOnUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_on_utc");

                b.Property<Guid>("EntityChangeId")
                    .HasColumnType("uuid")
                    .HasColumnName("entity_change_id");

                b.Property<string>("NewValue")
                    .HasColumnType("jsonb")
                    .HasColumnName("new_value");

                b.Property<string>("OriginalValue")
                    .HasColumnType("jsonb")
                    .HasColumnName("original_value");

                b.Property<string>("PropertyName")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("property_name");

                b.Property<string>("PropertyType")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("property_type");

                b.HasKey("Id");

                b.HasIndex("EntityChangeId");

                b.ToTable("entity_property_changes", (string)null);
            });

        modelBuilder.Entity("Sale.Domain.Entities.Customers.Customer", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<DateTime>("CreatedOnUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_on_utc");

                b.Property<bool>("Deleted")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("boolean")
                    .HasDefaultValue(false)
                    .HasColumnName("deleted");

                b.Property<DateTime?>("DeletedOnUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("deleted_on_utc");

                b.Property<Guid?>("ManagedByUserId")
                    .HasColumnType("uuid")
                    .HasColumnName("managed_by_user_id");

                b.Property<DateTime?>("ModifiedOnUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("modified_on_utc");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("name");

                b.Property<int>("OdooRef")
                    .HasColumnType("integer")
                    .HasColumnName("odoo_ref");

                b.Property<int>("VisitPerMonth")
                    .HasColumnType("integer")
                    .HasColumnName("visit_per_month");

                b.HasKey("Id");

                b.HasIndex("ManagedByUserId");

                b.ToTable("customers", (string)null);
            });

        modelBuilder.Entity("Sale.Domain.Entities.Customers.MonthlyReport", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<Guid>("CreateByUser")
                    .HasColumnType("uuid")
                    .HasColumnName("create_by_user");

                b.Property<DateTime>("CreatedOnUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_on_utc");

                b.Property<Guid>("CustomerId")
                    .HasColumnType("uuid")
                    .HasColumnName("customer_id");

                b.Property<int>("DailyPurchases")
                    .HasColumnType("integer")
                    .HasColumnName("daily_purchases");

                b.Property<int>("DailyVisitors")
                    .HasColumnType("integer")
                    .HasColumnName("daily_visitors");

                b.Property<bool>("Deleted")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("boolean")
                    .HasDefaultValue(false)
                    .HasColumnName("deleted");

                b.Property<DateTime?>("DeletedOnUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("deleted_on_utc");

                b.Property<DateTime>("FromTimeOnUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("from_time_on_utc");

                b.Property<bool>("IsConfirmed")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("boolean")
                    .HasDefaultValue(false)
                    .HasColumnName("is_confirmed");

                b.Property<DateTime?>("ModifiedOnUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("modified_on_utc");

                b.Property<string>("Note")
                    .HasColumnType("text")
                    .HasColumnName("note");

                b.Property<double>("OnlinePurchaseRate")
                    .HasColumnType("double precision")
                    .HasColumnName("online_purchase_rate");

                b.Property<DateTime>("ToTimeOnUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("to_time_on_utc");

                b.HasKey("Id");

                b.HasIndex("CreateByUser");

                b.HasIndex("CustomerId");

                b.ToTable("monthly_reports", (string)null);
            });

        modelBuilder.Entity("Sale.Domain.Entities.Customers.MonthlyReportItem", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<Guid>("CategoryId")
                    .HasColumnType("uuid")
                    .HasColumnName("category_id");

                b.Property<DateTime>("CreatedOnUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_on_utc");

                b.Property<DateTime?>("ModifiedOnUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("modified_on_utc");

                b.Property<Guid>("MonthlyReportId")
                    .HasColumnType("uuid")
                    .HasColumnName("monthly_report_id");

                b.Property<string>("Note")
                    .HasColumnType("text")
                    .HasColumnName("note");

                b.Property<double>("Quantity")
                    .HasColumnType("double precision")
                    .HasColumnName("quantity");

                b.Property<double>("Revenue")
                    .HasColumnType("double precision")
                    .HasColumnName("revenue");

                b.HasKey("Id");

                b.HasIndex("MonthlyReportId");

                b.ToTable("monthly_report_items", (string)null);
            });

        modelBuilder.Entity("Sale.Domain.Entities.Products.Category", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<DateTime>("CreatedOnUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_on_utc");

                b.Property<bool>("Deleted")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("boolean")
                    .HasDefaultValue(false)
                    .HasColumnName("deleted");

                b.Property<DateTime?>("DeletedOnUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("deleted_on_utc");

                b.Property<DateTime?>("ModifiedOnUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("modified_on_utc");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("name");

                b.Property<int?>("OdooRef")
                    .HasColumnType("integer")
                    .HasColumnName("odoo_ref");

                b.Property<int>("Weight")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasDefaultValue(0)
                    .HasColumnName("weight");

                b.HasKey("Id");

                b.ToTable("categories", (string)null);
            });

        modelBuilder.Entity("Sale.Domain.Entities.Users.User", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid")
                    .HasColumnName("id");

                b.Property<DateTime>("CreatedOnUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("created_on_utc");

                b.Property<bool>("Deleted")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("boolean")
                    .HasDefaultValue(false)
                    .HasColumnName("deleted");

                b.Property<DateTime?>("DeletedOnUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("deleted_on_utc");

                b.Property<Guid?>("ManagedByUserId")
                    .HasColumnType("uuid")
                    .HasColumnName("managed_by_user_id");

                b.Property<DateTime?>("ModifiedOnUtc")
                    .HasColumnType("timestamp with time zone")
                    .HasColumnName("modified_on_utc");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)")
                    .HasColumnName("name");

                b.Property<int>("Role")
                    .HasColumnType("integer")
                    .HasColumnName("role");

                b.Property<string>("_passwordHash")
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("password_hash");

                b.HasKey("Id");

                b.HasIndex("ManagedByUserId");

                b.ToTable("users", (string)null);
            });

        modelBuilder.Entity("Domain.Entities.Audits.EntityPropertyChange", b =>
            {
                b.HasOne("Domain.Entities.Audits.EntityChange", null)
                    .WithMany("PropertyChanges")
                    .HasForeignKey("EntityChangeId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Sale.Domain.Entities.Customers.Customer", b =>
            {
                b.HasOne("Sale.Domain.Entities.Users.User", null)
                    .WithMany()
                    .HasForeignKey("ManagedByUserId")
                    .OnDelete(DeleteBehavior.NoAction);
            });

        modelBuilder.Entity("Sale.Domain.Entities.Customers.MonthlyReport", b =>
            {
                b.HasOne("Sale.Domain.Entities.Users.User", null)
                    .WithMany()
                    .HasForeignKey("CreateByUser")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.HasOne("Sale.Domain.Entities.Customers.Customer", null)
                    .WithMany()
                    .HasForeignKey("CustomerId")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();
            });

        modelBuilder.Entity("Sale.Domain.Entities.Customers.MonthlyReportItem", b =>
            {
                b.HasOne("Sale.Domain.Entities.Customers.MonthlyReport", null)
                    .WithMany("Items")
                    .HasForeignKey("MonthlyReportId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Sale.Domain.Entities.Users.User", b =>
            {
                b.HasOne("Sale.Domain.Entities.Users.User", null)
                    .WithMany()
                    .HasForeignKey("ManagedByUserId")
                    .OnDelete(DeleteBehavior.Restrict);

                b.OwnsOne("Domain.ValueObjects.Email", "Email", b1 =>
                    {
                        b1.Property<Guid>("UserId")
                            .HasColumnType("uuid");

                        b1.Property<string>("Value")
                            .IsRequired()
                            .HasMaxLength(256)
                            .HasColumnType("character varying(256)")
                            .HasColumnName("email");

                        b1.HasKey("UserId");

                        b1.HasIndex("Value");

                        b1.ToTable("users");

                        b1.WithOwner()
                            .HasForeignKey("UserId");
                    });

                b.Navigation("Email")
                    .IsRequired();
            });

        modelBuilder.Entity("Domain.Entities.Audits.EntityChange", b =>
            {
                b.Navigation("PropertyChanges");
            });

        modelBuilder.Entity("Sale.Domain.Entities.Customers.MonthlyReport", b =>
            {
                b.Navigation("Items");
            });
#pragma warning restore 612, 618
    }
}
